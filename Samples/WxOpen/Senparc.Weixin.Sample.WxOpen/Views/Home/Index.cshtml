@{
    ViewData["Title"] = "Senparc.Weixin.WxOpen 微信小程序模块";
}
<div class="sdk-doc">
    <div class="row" style="position:relative;">
        <div class="col-sm-2" id="leftMenu">
            <div class="row">
                @(await Html.PartialAsync("_SideTopNote"))

                <nav id="navbar_left" class="navbar navbar-light bg-light flex-column align-items-stretch p-3">
                    <a class="navbar-brand" href="#">索引</a>
                    <nav class="nav nav-pills flex-column">
                        <a class="nav-link" href="#source_code">源码</a>
                        <a class="nav-link" href="#title_install">如何安装？</a>
                        <a class="nav-link" href="#title_setting">如何使用？</a>
                        <a class="nav-link" href="#title_advance">进阶</a>
                        <a class="nav-link" href="#title_about">关于</a>
                        <nav class="nav nav-pills flex-column">
                            <a class="nav-link ms-3 my-1" href="#title_about_team">团队</a>
                            <a class="nav-link ms-3 my-1" href="#title_about_support">支持</a>
                            <a class="nav-link ms-3 my-1" href="#title_about_license">开源协议</a>
                        </nav>
                    </nav>
                </nav>
            </div>

            @(await Html.PartialAsync("_SideBottomNote"))
        </div>

        <div class="col-sm-10 bd-main" data-bs-spy="scroll" data-bs-target="#navbar_left" data-bs-offset="0" tabindex="0">

            <div class="text-center">
                <h1 id="top-title" class="display-4">Senparc.Weixin.WxOpen 微信小程序模块</h1>


                <p class="no-text-indent"><a href="https://www.nuget.org/packages/Senparc.Weixin.WxOpen" target="_blank">Senparc.Weixin.WxOpen</a> 模块用于提供微信小程序的支持能力。</p>
                @(await Html.PartialAsync("_IconsPartial"))

            </div>

            <!-- Carousel -->
            <div id="banner-top" class="carousel slide" data-bs-ride="carousel">

                <!-- Indicators/dots -->
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#banner-top" data-bs-slide-to="0" class="active"></button>
                    <button type="button" data-bs-target="#banner-top" data-bs-slide-to="1"></button>
                    <button type="button" data-bs-target="#banner-top" data-bs-slide-to="2"></button>
                </div>

                <!-- The slideshow/carousel -->
                <div class="carousel-inner">
                    @(await Html.PartialAsync("_CarouselPartial"))
                </div>

                <!-- Left and right controls/icons -->
                <button class="carousel-control-prev" type="button" data-bs-target="#banner-top" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#banner-top" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
            </div>

            <div id="main-doc">
                <div id="source_code" class="target-fix"></div>
                @(await Html.PartialAsync("_SourceCode",@"Senparc.Weixin.WxOpen 源码位置：<a href=""https://github.com/JeffreySu/WeiXinMPSDK/tree/master/src/Senparc.Weixin.WxOpen"" target=""_blank"">/src/Senparc.Weixin.WxOpen/</a>"))

                <div id="title_install" class="target-fix"></div>

                <div>
                    <h3>如何安装？</h3>
                    <p>您可以直接引用 Senparc.Weixin 的源码进行开发，也可以引用已经打包完成的 dll（通过 Nuget 包，推荐），以方便随时获取官方的更新。注意：直接引用源码和引用 Nuget 包只能二选一。</p>

                    <h5>引用源码</h5>
                    <p>您可以在当前解决方案中，<strong>Libraries</strong> 目录下，将所需要引用的程序集引用（复制）到您开发环境的解决方案中，请注意需要同时引用被依赖的项目，如 <code>Senparc.Weixin</code> 项目是所有项目都需要依赖的。</p>
                    <p>当前示例项目默认就使用了直接引用源码的方式，可从 .csproj 文件中看到引用方式：</p>
                    <pre><code>&lt;ItemGroup&gt;
    &lt;ProjectReference Include=&quot;..\..\..\src\Senparc.Weixin.AspNet\Senparc.Weixin.AspNet.net6.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\src\Senparc.Weixin.WxOpen.Middleware\Senparc.Weixin.WxOpen.Middleware.net6.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\src\Senparc.Weixin.WxOpen\src\Senparc.Weixin.WxOpen\Senparc.Weixin.WxOpen\Senparc.Weixin.WxOpen.net6.csproj&quot; /&gt;
&lt;/ItemGroup&gt;</code></pre>

                    <h5>引用程序集（推荐）</h5>

                    <p>您可以通过 <code>Visual Studio</code>、<code>Visual Studio Code</code>、<code>dotnet 命令行</code> 等多种方式自动安装 Nuget 包。</p>
                    <nav>
                        <div class="nav nav-tabs" id="nav-tab" role="tablist">
                            <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-vs" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Visual Studio</button>
                            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-vscode" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Visual Studio Code</button>
                            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-cli" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">dotnet 命令行</button>
                        </div>
                    </nav>
                    <div class="tab-content" id="nav-tabContent-install">
                        <div class="tab-pane fade show active" id="nav-vs" role="tabpanel" aria-labelledby="nav-home-tab">
                            <p>
                                在开发项目【解决方案资源管理器】中，对需要添加 Senparc.Weixin.WxOpen 的模块点击右键，点击【管理 Nuget 程序包】，在【浏览】标签中输入 <strong>Senparc.Weixin.WxOpen</strong>，点击右侧【安装】按钮。如下图所示：<br />
                            </p>
                            <p>
                                <figure class="figure">
                                    <img src="~/images/home-install-01.png" class="figure-img img-fluid rounded" alt="通过 Visual Studio 安装" />
                                    <figcaption class="figure-caption text-center">通过 Visual Studio 安装</figcaption>
                                </figure>
                            </p>

                        </div>
                        <div class="tab-pane fade" id="nav-vscode" role="tabpanel" aria-labelledby="nav-profile-tab">
                            <p>首先，确认已经安装好 <a href="https://code.visualstudio.com/">VS Code</a> 以及 dotnet 命令行（安装 <a href="https://dotnet.microsoft.com/en-us/download" target="_blank">.NET SDK</a> 后会自动安装）。</p>
                            <p>然后，打开解决方案或项目所在目录，按 <kbd>Ctrl</kbd>+<kbd>~</kbd>，打开终端面板：</p>
                            <figure class="figure">
                                <img src="~/images/home-install-03.png" class="figure-img img-fluid rounded" alt="通过 VS Code 安装" />
                                <figcaption class="figure-caption text-center">打开 VS Code 终端面板</figcaption>
                            </figure>

                            <p>进入需要添加 Senparc.Weixin.WxOpen 的模块的项目的目录，输入：</p>
                            <blockquote class="blockquote">
                                <code>dotnet add package Senparc.Weixin.WxOpen</code>
                            </blockquote>

                            <p>
                                <figure class="figure">
                                    <img src="~/images/home-install-04.png" class="figure-img img-fluid rounded" alt="通过 VS Code 安装" />
                                    <figcaption class="figure-caption text-center">安装 Senparc.Weixin.WxOpen 模块</figcaption>
                                </figure>
                            </p>

                            <p>
                                安装完成后，可查看对应 .csproj 文件，被添加引用，如：
                            </p>
                            <pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Senparc.Weixin.WxOpen" Version="3.14.10.1" /&gt;
&lt;/ItemGroup&gt;</code></pre>
                        </div>
                        <div class="tab-pane fade" id="nav-cli" role="tabpanel" aria-labelledby="nav-profile-tab">
                            <p>首先，确认已经安装好 dotnet 命令行（安装 <a href="https://dotnet.microsoft.com/en-us/download" target="_blank">.NET SDK</a> 后会自动安装）。</p>
                            <p>进入需要添加 Senparc.Weixin.WxOpen 的模块的项目的目录，输入：</p>
                            <blockquote class="blockquote">
                                <code>dotnet add package Senparc.Weixin.WxOpen</code>
                            </blockquote>

                            <p>
                                <figure class="figure">
                                    <img src="~/images/home-install-02.png" class="figure-img img-fluid rounded" alt="通过 dotnet CLI 安装" />
                                    <figcaption class="figure-caption text-center">通过 dotnet CLI 安装</figcaption>
                                </figure>
                            </p>

                            <p>
                                安装完成后，可查看对应 .csproj 文件，被添加引用，如：
                            </p>
                            <pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Senparc.Weixin.WxOpen" Version="3.14.10.1" /&gt;
&lt;/ItemGroup&gt;</code></pre>
                        </div>
                    </div>
                </div>

                <div id="title_setting" class="target-fix"></div>
                <div @*class="mt-5 pt-5"*@>

                    <h3>如何使用？</h3>

                    <nav>
                        <div class="nav nav-tabs" id="nav-tab" role="tablist">
                            <button class="nav-link active" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-register" type="button" role="tab" aria-controls="nav-home" aria-selected="true">注册</button>
                            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-messagehandler" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">MessageHandler</button>
                            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-advanced-api" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">高级接口</button>
                            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-login" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">登录</button>
                            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-phone-number" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">获取手机号</button>

                        </div>
                    </nav>
                    <div class="tab-content" id="nav-tabContent-setting">
                        <div class="tab-pane fade show active" id="nav-register" role="tabpanel" aria-labelledby="nav-home-tab">
                            <h5>全局注册</h5>
                            <p>所有的 Senparc.Weixin SDK 注册过程都是类似的。</p>
                            <p>
                                首先，完成所有 Senparc.Weixin SDK 的整体注册代码。在 Program.cs 中加入以下代码：
                            </p>
                            <p>
                                <figure class="figure">
                                    <img src="~/images/home-dev-register-01.png" class="figure-img img-fluid rounded" alt="注册 Senparc.Weixin" />
                                    <figcaption class="figure-caption text-center">注册 Senparc.Weixin</figcaption>
                                </figure>
                            </p>
                            <p>
                                说明：
                                <ol>
                                    <li><code>builder.Services.AddMemoryCache()</code> Senparc.Weixin 支持本机缓存、Redis、Memcached 等多种缓存策略，默认使用本机缓存，此时需要激活本地缓存。</li>
                                    <li><code>builder.Services.AddSenparcWeixinServices(builder.Configuration)</code> 用于完成 Senparc.Weixin 的注册。</li>
                                    <li><code>app.UseSenparcWeixin()</code> 方法用于配置和启用 Senparc.Weixin。</li>
                                </ol>
                            </p>
                            <p>
                                以上代码对于所有的 Senparc.Weixin 下级模块都是相同的，只需要 3 句代码。
                            </p>
                            <figure class="file">
                                <blockquote class="blockquote">
                                    <p>本项目参考文件：</p>
                                </blockquote>
                                <figcaption class="blockquote-footer">
                                    /<cite title="Source Title">Program.cs</cite>
                                </figcaption>
                            </figure>

                            <h5>公众号注册</h5>
                            <p>在上述代码中的第 17 行委托方法中插入代码，即可完成默认公众号的注册：</p>
                            <p><code>register.RegisterWxOpenAccount(weixinSetting, "【盛派网络小助手】小程序");</code></p>
                            <p>
                                <figure class="figure">
                                    <img src="~/images/home-dev-register-02.png" class="figure-img img-fluid rounded" alt="注册微信公众号" />
                                    <figcaption class="figure-caption text-center">注册微信公众号</figcaption>
                                </figure>
                            </p>
                            <p>其中，<code>weixinSetting</code> 的值默认来自于 <code>appsettings.json</code>：</p>
                            <p>
                                <pre><code>  "SenparcWeixinSetting": {
    "IsDebug": true,

    //小程序
    "WxOpenAppId": "#{WxOpenAppId}#",
    "WxOpenAppSecret": "#{WxOpenAppSecret}#",
    "WxOpenToken": "#{WxOpenToken}#",
    "WxOpenEncodingAESKey": "#{WxOpenEncodingAESKey}#"
  }</code></pre>
                            </p>
                            <p>
                                <figure class="figure">
                                    <img src="~/images/home-dev-register-03.png" class="figure-img img-fluid rounded" alt="配置参数" />
                                    <figcaption class="figure-caption text-center">配置参数</figcaption>
                                </figure>
                            </p>
                            <p>其中，<code>WxOpenToken</code>、<code>WxOpenEncodingAESKey</code>、<code>WxOpenAppId</code> 和 <code>WxOpenAppSecret</code> 对应了微信公众号后台的配置参数。</p>
                            <figure class="file">
                                <blockquote class="blockquote">
                                    <p>本项目参考文件：</p>
                                </blockquote>
                                <figcaption class="blockquote-footer">
                                    /<cite title="Source Title">appsettings.json</cite>
                                </figcaption>
                            </figure>

                            <p>配置完成。</p>
                            <blockquote class="blockquote">
                                提示：自动注册的信息可通过 <code>Senparc.Weixin.Config.SenparcWeixinSetting</code> 获取。
                            </blockquote>
                        </div>

                        <div class="tab-pane fade" id="nav-messagehandler" role="tabpanel" aria-labelledby="nav-profile-tab">
                            <p><code>MessageHandler</code> 用于处理小程序客服对话窗口的消息以及其他微信服务器的推送信息。</p>
                            <p>SDK 已经为开发者准备好了所有需要的基础功能，开发者只需要创建一个自定义的子类，补充需要自定义的业务逻辑。</p>
                            <h5>自定义 MessageHandler</h5>
                            <p>当前示例中，我们给自定义的 MessageHandler 取名 <code>CustomWxOpenMessageHandler</code>。</p>
                            <figure class="file">
                                <blockquote class="blockquote">
                                    <p> CustomWxOpenMessageHandler.cs 本项目参考文件：</p>
                                </blockquote>
                                <figcaption class="blockquote-footer">
                                    /MessageHandlers/ 目录<br />
                                    <cite title="Source Title">CustomWxOpenMessageHandler.cs</cite> MessageHandler 消息处理<br />
                                    <cite title="Source Title">CustomWxOpenMessageContext.cs</cite> 自定义重写 DefaultMpMessageContext 上下文（可选）<br />
                                </figcaption>
                            </figure>
                            <p><code>CustomWxOpenMessageHandler.cs</code> 中所有演示的重写（<code>override</code>）方法中，只有 <code>DefaultResponseMessageAsync()</code> 方法是必须重写的，其他所有 <code>OnXxxRequestAsync()</code> 方法都为可选，当用户发送的消息，找不到对应重写方法时，则调用 <code>DefaultResponseMessageAsync()</code> 方法。</p>

                            <p>MessageHandler 有两种承载方式，使其可以被外部（微信服务器）通过 URL 访问到。分别是<strong>中间件方式</strong>（推荐）和<strong> Controller 方式</strong>。两种方式所使用的 <code>CustomWxOpenMessageHandler</code> 是通用的，因此可以随时切换和共存。</p>

                            <h5>中间件方式承载 MessageHandler</h5>

                            <p>中间件方式是推荐的方式，也是最简化的方式，无需创建任何新文件，只需在 <code>Program.cs</code> 文件所有 Senparc.Weixin 注册代码执行后的下方，引入中间件：</p>
                            <p>
                                <pre><code>app.UseMessageHandlerForWxOpen("/WxOpenAsync", CustomWxOpenMessageHandler.GenerateMessageHandler, options =>
{
    options.AccountSettingFunc = context =>  Senparc.Weixin.Config.SenparcWeixinSetting;
});
                </code></pre>
                            </p>
                            <p>完成后，即可通过Url <strong><code>域名/WxOpenAsync</code></strong> 访问 MessageHandler，设置为公众号后台的消息 URL。</p>
                            <p><a href="/WxOpenAsync" target="_blank">测试 /WxOpenAsync</a></p>
                            <figure class="file">
                                <blockquote class="blockquote">
                                    <p> 本项目参考文件：</p>
                                </blockquote>
                                <figcaption class="blockquote-footer">
                                    /<cite title="Source Title">Program.cs</cite>
                                </figcaption>
                            </figure>

                            <p>更多中间件方式请参考：<a href="https://www.cnblogs.com/szw/p/Wechat-MessageHandler-Middleware.html" target="_blank">《在 .NET Core 2.0/3.0 中使用 MessageHandler 中间件》</a>（同样适用于 .NET 6.0 及以上，用法和公众号相同）。</p>

                            <h5>Controller 方式承载 MessageHandler</h5>

                            <p>当中间件的方式满足不了需求时，可以使用 Controller 将执行过程“展开”，对每一步执行进行更加精确的控制或干预。</p>
                            <p>使用 Controller 方式，需要创建 2 个 Action（ActionName 都为 <code>Index</code>），分别对应微信后台验证（Get 请求），以及真实消息推送（Post 请求）。本项目示例位于 WxOpenController.cs 中。</p>
                            <figure class="file">
                                <blockquote class="blockquote">
                                    <p>WxOpenController.cs 本项目参考文件：</p>
                                </blockquote>
                                <figcaption class="blockquote-footer">
                                    /Controllers/<cite title="Source Title">WxOpenController.cs</cite>
                                </figcaption>
                            </figure>
                            <p>完成后，即可通过Url <strong><code>域名/WxOpen</code></strong> 访问 MessageHandler，设置为公众号后台的消息 URL。</p>
                            <p><a href="/WxOpen" target="_blank">测试 /WxOpen</a></p>

                            <p>更多 Controller 方式请参考：<a href="https://www.cnblogs.com/szw/p/3414862.html" target="_blank">《了解MessageHandler》</a>（推荐使用全套异步方法，基本用法和公众号相同）</p>
                        </div>

                        <div class="tab-pane fade" id="nav-advanced-api" role="tabpanel" aria-labelledby="nav-profile-tab">
                            <p>完成 <code>Program.cs</code> 文件中的常规注册后，即可在程序的任意地方使用高级接口。</p>
                            <blockquote class="blockquote">
                                注意：<br />
                                1、高级接口的配置和 <code>MessageHandler</code> 没有关联，两者可以独立或配合使用。<br />
                                2、SDK 内几乎所有高级接口的第一个参数同时支持传入 AppId 或 AccessToken，通常名称为 <code>appIdOrAccessToken</code>，SDK 会根据参数特征自动识别输入的是 AppId 还是 AccessToken，并做区分处理。
                            </blockquote>
                            <h5>使用 AppId 调用接口（推荐）</h5>
                            <p>例如，我们可以在任意一个方法中调用一个高级接口：</p>
                            <p>
                                <pre><code>using Senparc.Weixin.WxOpen.AdvancedAPIs;

var appId = Senparc.Weixin.Config.SenparcWeixinSetting.WxOpenAppId;
var openId = "xxx";
var content = "这是一条客服消息";
var result = await CustomApi.SendTextAsync(appId, openId, content);//发送客服消息</code></pre>
                            </p>
                            <blockquote class="blockquote">
                                appId 参数，必须是已经经过注册的，这样即使 AccessToken 过期，SDK也会全自动处理。如果是未经过注册的 appId，则需要先获取 AccessToken，然后调用接口。
                            </blockquote>

                            <h5>使用 AccessToken 调用接口（不推荐）</h5>

                            <p>
                                <pre><code>var accessToken = Senparc.Weixin.MP.CommonApi.GetTokenAsync(appId, appSecret);//获取 AccessToken
var openId = "xxx";
var content = "这是一条客服消息";
var result = await CustomApi.SendTextAsync(accessToken, openId, content);//发送客服消息</code></pre>

                            </p>

                            <blockquote class="blockquote">
                                注意：<br />
                                1、使用 AccessToken 方式调用接口，无法保证当前 AccessToken 的有效性，因此建议使用前进行有效性校验，并使用 <code>try-catch</code> 方式捕获 AccessToken 不可用的异常，然后进行重试。因此直接使用 AccessToken 调用接口的方式并不推荐在常规情况下使用。<br />
                                2、小程序和公众号使用相同的 AccessToken 获取接口，因此，此处调用了 <code>Senparc.Weixin.MP</code> 类库中公众号的相同方法。因为 <code>Senparc.Weixin.WxOpen</code> 模块默认已经依赖了 <code>Senparc.Weixin.MP</code>，所以不必再手动安装 MP 模块。
                            </blockquote>
                        </div>

                        <!-- JSSDK 开始 -->
                        <div class="tab-pane fade" id="nav-login" role="tabpanel" aria-labelledby="nav-profile-tab">
                        </div>
                        <!-- JSSDK 结束 -->


                        <!-- 获取手机号 开始 -->
                        <div class="tab-pane fade" id="nav-phone-number" role="tabpanel" aria-labelledby="nav-profile-tab">
                        </div>
                        <!-- 获取手机号 结束 -->

                    </div>


                    @(await Html.PartialAsync("_AdvancedPartial"))

                    @(await Html.PartialAsync("_AboutPartial"))
                </div>
            </div>
        </div>
    </div>
</div>